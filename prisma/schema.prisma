// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "/workspaces/web/node_modules/.prisma/client"
}

generator pyclient {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  image    user_image?
  password password?

  projects project[]

  roles       role[]
  sessions    session[]
  connections connection[]
}

model project {
  id      String @id @default(cuid())
  name    String
  content String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  owner    user   @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner_id String

  candidates candidate[]
  sequences  outreach_sequence[]

  // non-unique foreign key
  @@index([owner_id])
}

enum candidate_stage {
  SHORTLISTED
  SEQUENCE
  APPLIED
  INTERVIEWING
  OFFERED
  HIRED
  REJECTED
}

model candidate {
  id String @id @default(cuid())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  stage candidate_stage @default(SHORTLISTED)

  project    project? @relation(fields: [project_id], references: [id])
  project_id String?

  person    person @relation(fields: [person_id], references: [id])
  person_id String

  outreachStatus outreach_status[]
}

model person {
  id    String  @id @default(cuid())
  name  String?
  email String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  candidate candidate[]
}

model outreach_sequence {
  id String @id @default(cuid())

  project    project @relation(fields: [project_id], references: [id])
  project_id String

  // Relation to OutreachStep
  steps outreach_step[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model outreach_step {
  id String @id @default(cuid())

  sequence    outreach_sequence @relation(fields: [sequence_id], references: [id])
  sequence_id String

  // Relation to OutreachTemplate
  template    outreach_template? @relation(fields: [template_id], references: [id])
  template_id String?

  delayDays Int // Number of days to wait before sending this step

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  outreach_status    outreach_status? @relation(fields: [outreach_status_id], references: [id])
  outreach_status_id String?
}

model outreach_template {
  id      String @id @default(cuid())
  subject String
  body    String

  steps outreach_step[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model outreach_status {
  id String @id @default(cuid())

  steps   outreach_step[]
  replied Boolean         @default(false)
  active  Boolean         @default(true) // Whether the outreach sequence is active

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  candidate    candidate @relation(fields: [candidate_id], references: [id])
  candidate_id String
}

model user_image {
  id           String  @id @default(cuid())
  alt_text     String?
  content_type String
  blob         Bytes

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @unique
}

model password {
  hash String

  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @unique
}

model session {
  id              String   @id @default(cuid())
  expiration_date DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String

  // non-unique foreign key
  @@index([user_id])
}

model permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  roles role[]

  @@unique([action, entity, access])
}

model role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users       user[]
  permissions permission[]
}

model verification {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expires_at DateTime?

  @@unique([target, type])
}

model connection {
  id            String @id @default(cuid())
  provider_name String
  provider_id   String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String

  @@unique([provider_name, provider_id])
}
